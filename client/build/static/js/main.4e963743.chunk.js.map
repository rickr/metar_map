{"version":3,"sources":["components/Dashboard.js","components/Logs.js","App.js","index.js"],"names":["Dashboard","props","airportsPerRow","cycleDelay","afterClickCycleDelay","updateSelectedAirport","metar","clearTimeout","state","airportCycleTimer","setTimeout","cycleAirports","setState","selectedAirport","metars","nextIndex","currentIndex","length","componentWillUnmount","airportComponents","this","airportRows","metarCount","last_updated","Date","lastUpdated","airports","React","Component","AirportRows","flightCategory","items","forEach","_i","airport","Object","values","station_id","flightCategoryCSS","flight_category","flightCategoryToCSS","_text","rawText","raw_text","item","key","id","push","rows","i","start","end","slice","map","row","AirportRow","className","children","Airport","sendAirportData","onClick","style","padding","marginBottom","AirportWarning","warning","now","wind_speed_kt","wind_gust_kt","AirportInfo","metar_text","taf_text","airport_id","taf","split","join","CurrentTimes","metarAgeTime","diff","Math","floor","currentTime","toString","padStart","toLocaleString","setInterval","marginTop","paddingTop","Logs","componentDidMount","console","log","logLines","WebSocketClient","App","connect","window","location","host","ws","WebSocket","subscribe","onopen","messageTypes","messageType","send","onmessage","evt","handleMessage","JSON","parse","data","message","type","payload","stringify","activeTab","isActive","tabName","makeActive","render","to","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4e963743.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/App.css';\n\nclass Dashboard extends React.Component {\n  airportsPerRow = 7;\n  cycleDelay = 10 * 1000;\n  afterClickCycleDelay = 20 * 1000;\n\n  constructor(props){\n    super(props);\n    this.state = {\n      selectedAirport: null,\n      airportComponents: [],\n      currentIndex: 0,\n      airportCycleTimer: null\n    };\n  };\n\n  // When an airport is clicked display the information for that airport\n  updateSelectedAirport = (metar) => {\n    clearTimeout(this.state.airportCycleTimer);\n    let airportCycleTimer = setTimeout(this.cycleAirports, this.afterClickCycleDelay)\n    this.setState({\n      airportCycleTimer: airportCycleTimer,\n      selectedAirport: metar\n    })\n  };\n\n  // FIXME this should show the first airport immediately\n  cycleAirports = () => {\n    if(!this.state.selectedAirport){\n      if(!this.props.metars){\n        // If we dont have any airports loaded keep checking\n        // at a short interval until we do\n        setTimeout(this.cycleAirports, 100);\n        return false\n      }\n    }\n\n    let nextIndex = this.state.currentIndex >= (this.props.metars.length - 1) ? 0 : this.state.currentIndex + 1\n    this.setState({ currentIndex: nextIndex });\n\n    let airportCycleTimer = setTimeout(this.cycleAirports, this.cycleDelay)\n    this.setState({\n      airportCycleTimer: airportCycleTimer,\n      selectedAirport: this.props.metars[this.state.currentIndex]\n    })\n  }\n\n  componentDidMount() {\n    this.cycleAirports();\n  }\n\n  // FIXME cancel currentTimes timers when unmounting\n  componentWillUnmount = () => {\n  }\n\n  render(){\n    return(\n      <div>\n        <AirportRows metars={this.props.metars} airportRows={this.props.metarCount / this.airportsPerRow} airportsPerRow={this.airportsPerRow} updateSelectedAirport={this.updateSelectedAirport}/>\n        <CurrentTimes last_updated={new Date(this.props.lastUpdated)} />\n\n        <AirportInfo selectedAirport={this.state.selectedAirport} airports={this.props.airports}/>\n      </div>\n    );\n  };\n}\n\nclass AirportRows extends React.Component{\n  // Convert flight categories to a valid bulma css color class\n  flightCategoryToCSS(flightCategory){\n    if(flightCategory === \"VFR\"){\n      return 'is-success';\n    } else if(flightCategory === 'MVFR'){\n      return 'is-info';\n    } else if(flightCategory === 'IFR'){\n      return 'is-danger';\n    } else if(flightCategory === 'LIFR'){\n      return 'is-lifr';\n    } else {\n      return 'unknown-' + flightCategory;\n    }\n  };\n\n  render(){\n    let items = [];\n    if(this.props.metars.length === 0){ return false }\n    this.props.metars.forEach((metar, _i) => {\n      if(!metar){ return }\n      let airport = Object.values(metar.station_id);\n      let flightCategoryCSS = metar.flight_category ? this.flightCategoryToCSS(metar.flight_category._text) : 'unknown-category';\n      let rawText = Object.values(metar.raw_text);\n\n      let item = <Airport\n                    key={airport}\n                    id={airport}\n                    flight_category={flightCategoryCSS}\n                    raw_text={rawText}\n                    updateSelectedAirport={this.props.updateSelectedAirport}\n                    metar={metar}\n                 />\n\n      items.push(item)\n    });\n\n    let rows = [];\n    for(let i = 0; i < this.props.airportRows; i++){\n      let start = i * this.props.airportsPerRow;\n      let end = start + this.props.airportsPerRow\n      rows.push(items.slice(start, end));\n    }\n    return(rows.map((row, i) => { return(<AirportRow key={i}>{row}</AirportRow>) }))\n  }\n}\n\nclass AirportRow extends React.Component {\n  render() {\n    return(\n      <div className=\"tile is-ancestor\">\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass Airport extends React.Component {\n  sendAirportData = () => {\n    this.props.updateSelectedAirport(this.props.metar);\n  }\n\n  render() {\n    return(\n      <div className=\"tile is-parent has-text-centered\" onClick={this.sendAirportData}>\n        <article className={ `tile is-child box notification ${this.props.flight_category}` } style={{padding: '0 5px 5px 0'}}>\n          <p className=\"title is-4 has-text-centered\" style={{marginBottom: '5px'}}> {this.props.id} </p>\n          <AirportWarning metar={this.props.metar}/>\n        </article>\n      </div>\n    );\n  }\n}\n\nclass AirportWarning extends React.Component {\n  render(){\n    let warning = [];\n    let key = Date.now();\n    // We can probably be smarter about displaying warnings\n    // Icing, better represent wind, what else?\n    if(this.props.metar.wind_speed_kt && this.props.metar.wind_speed_kt._text > 20){ warning.push(<i key={key} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 20){ warning.push(<i key={key + 1} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 30){ warning.push(<i key={key + 2} className=\"fas fa-exclamation-triangle\"></i>) }\n\n    return(\n      <p id={this.props.metar.station_id} className=\"icon is-small has-text-warning\">\n        { warning }\n      </p>\n    )\n  }\n}\n\nclass AirportInfo extends React.Component {\n  render(){\n    let metar_text = null;\n    let taf_text = [];\n    if(this.props.selectedAirport){\n      let airport_id = this.props.selectedAirport.station_id._text;\n\n      metar_text = this.props.selectedAirport.raw_text._text;\n      let taf = this.props.airports[airport_id].taf\n      if(taf){\n        taf_text = taf.raw_text._text.split(/(?=TEMPO|BECMG|FM|PROB)/)\n      }\n    }else{\n      metar_text = ''\n    }\n\n    return(\n      <div className='has-text-centered'>\n        <pre>\n          <p>{metar_text}</p>\n          <p>{taf_text.join(\"\\n\")}</p>\n        </pre>\n      </div>\n    )\n  }\n}\n\nclass CurrentTimes extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentTime: new Date().toLocaleString(),\n    }\n  }\n\n  componentDidMount() {\n    setInterval(() => { this.setState({ currentTime : new Date() }) },1000)\n  }\n\n  metarAgeTime = () => {\n    let diff = Math.floor((this.state.currentTime - this.props.last_updated) / 1000);\n    let min = Math.floor(diff / 60);\n    let sec = Math.floor(diff % 60);\n    return min + \":\" + sec.toString().padStart(2, '0');\n  }\n\n  render(){\n    return(\n      <div className='tile is-ancenstor'>\n        <div className='tile is-parent is-12 has-text-grey-lighter' style={{ marginTop: '0px', paddingTop: '0px' }} >\n          <div className='tile is-child'>\n            <div className='is-pulled-right'>{this.metarAgeTime()} old</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\n\nclass Logs extends React.Component {\n  componentDidMount = () => {\n    console.log(\"Fetching logs\");\n  }\n\n  render(){\n    return(\n      <div>\n        <pre>{this.props.logLines.values}</pre>\n      </div>\n    );\n  };\n}\n\nexport default Logs;\n","import React from 'react';\nimport './css/App.css';\nimport Dashboard from './components/Dashboard';\nimport Logs from './components/Logs';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n// WebSocketClient handles all aspects of our websocket and its data\n// and updates the state of our app\nclass WebSocketClient {\n  constructor(App){\n    this.App = App\n    this.messageTypes = ['metars', 'logs'];\n    this.connect();\n  };\n\n  connect = () => {\n    console.log(\"Opening WS to \" + window.location.host);\n    this.ws = new WebSocket('ws://' + window.location.host + '/metar.ws')\n  }\n\n  subscribe = () => {\n    this.ws.onopen = () => {\n      console.log('Connected');\n      this.messageTypes.forEach((messageType) => { this.ws.send(messageType) });\n    }\n\n    this.ws.onmessage = (evt) => { this.handleMessage(JSON.parse(evt.data)) }\n  }\n\n  handleMessage = (message) => {\n    switch(message.type){\n      case \"metars\":\n        console.log('RX METAR');\n        this.App.setState({\n          airports: message.payload,\n          metars: message.payload.metars.airports,\n          metarCount: message.payload.metars.airports.length,\n          lastUpdated: message.payload.metars.lastUpdated\n        });\n        break;\n      case \"logs\":\n        console.log('RX LOG');\n        this.App.setState({ logLines: message.payload, });\n        break;\n      default:\n        console.log('Unknown message type: ' + JSON.stringify(message));\n        break;\n    }\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      ws: null,\n      airports: [],\n      metars: [],\n      metarCount: null,\n      lastUpdated: null,\n      logLines: []\n    };\n  }\n\n  componentDidMount = () => {\n    let ws = new WebSocketClient(this);\n    this.setState({\n      ws: ws,\n      activeTab: 'dashboard'\n    })\n    ws.subscribe();\n  }\n\n  isActive = (tabName) => { if(tabName === this.state.activeTab){ return 'is-active' } }\n\n  makeActive = (tabName) => { this.setState({activeTab: tabName}); }\n\n  render = () => {\n    return(\n      <Router>\n        <div className=\"tabs\">\n          <ul>\n            <li className={this.isActive('dashboard')}><Link onClick={() => this.makeActive('dashboard')} to=\"/\">Dashboard</Link></li>\n            <li className={this.isActive('logs')}><Link onClick={() => this.makeActive('logs')} to=\"/logs\">Logs</Link></li>\n          </ul>\n        </div>\n        <Switch>\n            <Route exact path=\"/\"\n              render={(props) =>\n                <Dashboard ws={this.state.ws}\n                           airports={this.state.airports}\n                           metars={this.state.metars}\n                           metarCount={this.state.metarCount}\n                           lastUpdated={this.state.lastUpdated}\n                />\n              }>\n            </Route>\n            <Route path=\"/logs\">\n              <Logs logLines={this.state.logLines}/>\n            </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}