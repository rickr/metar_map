{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","ws","WebSocket","airportsPerRow","cycleDelay","afterClickCycleDelay","firstMessage","updateSelectedAirport","metar","clearTimeout","state","airportCycleTimer","setTimeout","cycleAirports","setState","selectedAirport","nextIndex","currentIndex","metars","length","airports","metarCount","airportComponents","lastUpdated","this","onopen","console","log","onmessage","evt","data","JSON","parse","type","payload","stringify","airportRows","last_updated","Date","React","Component","AirportRows","flightCategory","items","i","airport","Object","values","station_id","flightCategoryCSS","flight_category","flightCategoryToCSS","_text","rawText","raw_text","item","key","id","push","rows","start","end","slice","map","row","AirportRow","className","children","Airport","sendAirportData","onClick","style","padding","marginBottom","AirportWarning","warning","now","wind_speed_kt","wind_gust_kt","AirportInfo","metar_text","taf_text","airport_id","taf","split","join","CurrentTimes","metarAgeTime","diff","Math","floor","currentTime","toString","padStart","toLocaleString","setInterval","marginTop","paddingTop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08f37bdf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\n//TODO Breakout classes to files\nclass Dashboard extends React.Component {\n  ws = new WebSocket('ws://localhost:4567/metar.ws');\n\n  airportsPerRow = 7;\n  cycleDelay = 10 * 1000;\n  afterClickCycleDelay = 20 * 1000;\n  firstMessage = true;\n\n  constructor(props){\n    super(props);\n    this.state = {\n      airports: {},\n      metars: [],\n      metarCount: 0,\n      selectedAirport: null,\n      airportComponents: [],\n      currentIndex: 0,\n      lastUpdated: 0,\n      airportCycleTimer: null\n    };\n  };\n\n  // When an airport is clicked display the information for that airport\n  updateSelectedAirport = (metar) => {\n    clearTimeout(this.state.airportCycleTimer);\n    let airportCycleTimer = setTimeout(this.cycleAirports, this.afterClickCycleDelay)\n    this.setState({\n      airportCycleTimer: airportCycleTimer,\n      selectedAirport: metar\n    })\n  };\n\n  cycleAirports = () => {\n    let nextIndex = this.state.currentIndex >= (this.state.metars.length - 1) ? 0 : this.state.currentIndex + 1\n    this.setState({ currentIndex: nextIndex });\n\n    let airportCycleTimer = setTimeout(this.cycleAirports, this.cycleDelay)\n    this.setState({\n      airportCycleTimer: airportCycleTimer,\n      selectedAirport: this.state.metars[this.state.currentIndex]\n    })\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => { console.log('Connected') }\n\n    this.ws.onmessage = (evt) => {\n      const data = JSON.parse(evt.data);\n      if(data.type === 'metar'){\n        console.log('RX metar message');\n        console.log(data.payload.metars.airports.length);\n\n        this.setState({ airports: data.payload,\n          metars: data.payload.metars.airports,\n          metarCount: data.payload.metars.airports.length,\n          lastUpdated: data.payload.metars.lastUpdated\n        })\n\n        if(this.firstMessage){\n          this.firstMessage = false;\n          this.setState({\n            selectedAirport: data.payload.metars.airports[0]\n          })\n        }\n      } else {\n        console.log('Unknown message: ' + JSON.stringify(data));\n      }\n    }\n\n    this.cycleAirports();\n  }\n\n  render(){\n    return(\n      <div>\n        <AirportRows metars={this.state.metars} airportRows={this.state.metarCount / this.airportsPerRow} airportsPerRow={this.airportsPerRow} updateSelectedAirport={this.updateSelectedAirport}/>\n        <CurrentTimes last_updated={new Date(this.state.lastUpdated)} />\n\n        <AirportInfo selectedAirport={this.state.selectedAirport} airports={this.state.airports}/>\n      </div>\n    );\n  };\n}\n\nclass AirportRows extends React.Component{\n  // Convert flight categories to a valid bulma css color class\n  flightCategoryToCSS(flightCategory){\n    if(flightCategory === \"VFR\"){\n      return 'is-success';\n    } else if(flightCategory === 'MVFR'){\n      return 'is-info';\n    } else if(flightCategory === 'IFR'){\n      return 'is-danger';\n    } else if(flightCategory === 'LIFR'){\n      return 'is-lifr';\n    } else {\n      return 'unknown-' + flightCategory;\n    }\n  };\n\n\n  render(){\n    let items = [];\n    for(let i = 0; i < this.props.metars.length; i++){\n      let metar = this.props.metars[i];\n      let airport = Object.values(metar.station_id);\n      let flightCategoryCSS = metar.flight_category ? this.flightCategoryToCSS(metar.flight_category._text) : 'unknown-category';\n      let rawText = Object.values(metar.raw_text);\n\n      let item = <Airport\n                    key={airport}\n                    id={airport}\n                    flight_category={flightCategoryCSS}\n                    raw_text={rawText}\n                    updateSelectedAirport={this.props.updateSelectedAirport}\n                    metar={metar}\n                 />\n\n      items.push(item)\n    }\n\n    let rows = [];\n    for(let i = 0; i < this.props.airportRows; i++){\n      let start = i * this.props.airportsPerRow;\n      let end = start + this.props.airportsPerRow\n      rows.push(items.slice(start, end));\n    }\n    return(rows.map((row, i) => { return(<AirportRow key={i}>{row}</AirportRow>) }))\n  }\n}\n\nclass AirportRow extends React.Component {\n  render() {\n    return(\n      <div className=\"tile is-ancestor\">\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass Airport extends React.Component {\n  sendAirportData = () => {\n    this.props.updateSelectedAirport(this.props.metar);\n  }\n\n  render() {\n    return(\n      <div className=\"tile is-parent has-text-centered\" onClick={this.sendAirportData}>\n        <article className={ `tile is-child box notification ${this.props.flight_category}` } style={{padding: '0 5px 5px 0'}}>\n          <p className=\"title is-4 has-text-centered\" style={{marginBottom: '5px'}}> {this.props.id} </p>\n          <AirportWarning metar={this.props.metar}/>\n        </article>\n      </div>\n    );\n  }\n}\n\nclass AirportWarning extends React.Component {\n  render(){\n    let warning = [];\n    let key = Date.now();\n    // We can probably be smarter about displaying warnings\n    // Icing, better represent wind, what else?\n    if(this.props.metar.wind_speed_kt && this.props.metar.wind_speed_kt._text > 20){ warning.push(<i key={key} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 20){ warning.push(<i key={key + 1} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 30){ warning.push(<i key={key + 2} className=\"fas fa-exclamation-triangle\"></i>) }\n\n    return(\n      <p id={this.props.metar.station_id} className=\"icon is-small has-text-warning\">\n        { warning }\n      </p>\n    )\n  }\n}\n\nclass AirportInfo extends React.Component {\n  render(){\n    let metar_text = null;\n    let taf_text = [];\n    if(this.props.selectedAirport){\n      let airport_id = this.props.selectedAirport.station_id._text;\n\n      metar_text = this.props.selectedAirport.raw_text._text;\n      let taf = this.props.airports[airport_id].taf\n      if(taf){\n        taf_text = taf.raw_text._text.split(/(?=TEMPO|BECMG|FM|PROB)/)\n      }\n    }else{\n      metar_text = ''\n    }\n\n    return(\n      <div>\n        <pre>\n          <p>{metar_text}</p>\n          <p>{taf_text.join(\"\\n\")}</p>\n        </pre>\n      </div>\n    )\n  }\n}\n\nclass CurrentTimes extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentTime: new Date().toLocaleString(),\n    }\n  }\n\n  componentDidMount() {\n    setInterval( () => {\n      this.setState({\n        currentTime : new Date()\n      })\n    },1000)\n  }\n\n  metarAgeTime = () => {\n    let diff = Math.floor((this.state.currentTime - this.props.last_updated) / 1000);\n    let min = Math.floor(diff / 60);\n    let sec = Math.floor(diff % 60);\n    return min + \":\" + sec.toString().padStart(2, '0');\n  }\n\n  render(){\n    return(\n      <div className='tile is-ancenstor'>\n        <div className='tile is-parent is-12 has-text-grey-lighter' style={{ marginTop: '0px', paddingTop: '0px' }} >\n          <div className='tile is-child'>\n            <div className='is-pulled-right'>{this.metarAgeTime()} old</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}