continue
pp @metar
@metar
@metar.find { |k, v| 'yes' if k == :KISP } 
@metar.find { |k, v| 'yes' if k == :KBDL } 
@metar.find { |k, v| 'yes' if k == :KHWV } 
@metar.find { |k, v| 'yes' if k == :KISP } 
@metars
metars
c
airports.select { |a| @metar.find { |k, v|  pua0ts v; v if k == a.upcase.to_sym } } 
airports.select { |a| @metar.find { |k, v|  puts v; v if k == a.upcase.to_sym } } 
airports.select { |a| @metar.find { |k, v|  v if k == a.upcase.to_sym } } 
airports.collect { |a| @metar.find { |k, v|  v if k == a.upcase.to_sym } } 
airports.select { |a| @metar.find { |k, v|  v if k == a.upcase.to_sym } } 
airports.select { |a| @metar.find { |k, v|  k == a.upcase.to_sym } } 
airports.collect { |a| @metar.find { |k, v|  k == a.upcase.to_sym } } 
airports.collect { |a| @metar.find { |k, v| puts k; puts v; k == a.upcase.to_sym } } 
airports.collect { |a| @metar.find { |k, v| k == a.upcase.to_sym } } 
airports.select.collect { |a| @metar.find { |k, v| k == a.upcase.to_sym } } 
airports.flat_map.select { |a| @metar.find { |k, v| k == a.upcase.to_sym } } 
airports.flat_map.collect { |a| @metar.find { |k, v| k == a.upcase.to_sym } } 
airports.flat_map.collect { |a| puts a } 
airports
exit
continue
bye
key
exit
continue
airport.upcase.to_sym
airport
key
continue
key
@metars
metars
continue
@metar.select { |k, v| k == :KISP } 
@metar.select { |k, v| puts k } 
@metar.select { |k, v| k == 'KISP' } 
@metar.select('KISP')
@metar.find('KISP')
@metar
metars
airports
continue
d
n
@metar.class
@metar.count
@metar
continue
Metar.from_disk
@metar.count
@metar
n
@metar.class
@metar.first
@metar
@metar.first
@metar
continue
@metars.each { |m| puts m.value.raw_text }
@metars.first
@metars.second
@metars
@metars[:KBDR]
@metars[:KBDR].raw_text
@metars[:KBDR]
@metars
continue
@metars.key({'station_id': ['KBDR']})
@metars
quit
continue
@metars
d
d['station_id']
d
metar
d
data
metar
@metars.first[1]
@metars.first[0]
@metars.first.class
@metars.first.second
@metars.first.first
@metars.first.class
@metars.first
@metars.
@metars.second
@metars.first.class
@metars.first
@metars.class
@metars.clast
@metars
c
@metars.class
@metars
c
@metars.class
@metars
n
@metars.count
@metars
@metars.class
n
nnn
@metars.class
@metars.first
@metars
n
@metars
n
@metars
