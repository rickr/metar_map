{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","ws","WebSocket","airportsPerRow","cycleDelay","firstMessage","updateSelectedAirport","metar","setState","selectedAirport","cycleAirports","nextIndex","state","currentIndex","metars","length","setTimeout","metarCount","airportComponents","this","onopen","console","log","onmessage","evt","data","JSON","parse","type","payload","airports","stringify","airportRows","React","Component","AirportRows","flightCategory","items","i","airport","Object","values","station_id","flightCategoryCSS","flight_category","flightCategoryToCSS","_text","rawText","raw_text","item","key","id","push","rows","start","end","slice","map","row","AirportRow","className","children","Airport","sendAirportData","onClick","style","padding","marginBottom","AirportWarning","warning","Date","now","wind_speed_kt","wind_gust_kt","AirportInfo","metar_text","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50f06dff.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nclass Dashboard extends React.Component {\n  ws = new WebSocket('ws://localhost:4567/metar.ws');\n\n  airportsPerRow = 7;\n  cycleDelay = 10 * 1000;\n  firstMessage = true;\n\n  constructor(props){\n    super(props);\n    this.state = {\n      metars: [],\n      metarCount: 0,\n      selectedAirport: null,\n      airportComponents: [],\n      currentIndex: 0\n    };\n  };\n\n  updateSelectedAirport = (metar) => { this.setState({ selectedAirport: metar }); };\n\n  cycleAirports = () => {\n    let nextIndex = this.state.currentIndex >= (this.state.metars.length - 1) ? 0 : this.state.currentIndex + 1\n    this.setState({ currentIndex: nextIndex });\n\n    this.updateSelectedAirport(this.state.metars[this.state.currentIndex]);\n\n    setTimeout(this.cycleAirports, this.cycleDelay)\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('Connected')\n    }\n\n    this.ws.onmessage = (evt) => {\n      const data = JSON.parse(evt.data);\n      if(data.type === 'metar'){\n        console.log('RX metar message');\n        this.setState({\n          metars: data.payload.airports,\n          metarCount: data.payload.airports.length,\n        })\n\n        if(this.firstMessage){\n          this.firstMessage = false;\n          this.setState({\n            selectedAirport: data.payload.airports[0]\n          })\n        }\n      } else (\n        console.log('Unknown message: ' + data)\n      )\n    }\n\n    this.cycleAirports();\n  }\n\n  render(){\n    return(\n      <div>\n        <pre>{JSON.stringify(this.state.metars)}</pre>\n\n        <AirportRows metars={this.state.metars} airportRows={this.state.metarCount / this.airportsPerRow} airportsPerRow={this.airportsPerRow} updateSelectedAirport={this.updateSelectedAirport}/>\n\n        <AirportInfo selectedAirport={this.state.selectedAirport}/>\n      </div>\n    );\n  };\n}\n\nclass AirportRows extends React.Component{\n  // Convert flight categories to a valid bulma css color class\n  flightCategoryToCSS(flightCategory){\n    if(flightCategory === \"VFR\"){\n      return 'is-success';\n    } else if(flightCategory === 'MVFR'){\n      return 'is-info';\n    } else if(flightCategory === 'IFR'){\n      return 'is-danger';\n    } else {\n      return 'unknown-' + flightCategory;\n    }\n  };\n\n\n  render(){\n    let items = [];\n    for(let i = 0; i < this.props.metars.length; i++){\n      let metar = this.props.metars[i];\n      let airport = Object.values(metar.station_id);\n      let flightCategoryCSS = metar.flight_category ? this.flightCategoryToCSS(metar.flight_category._text) : 'unknown-category';\n      let rawText = Object.values(metar.raw_text);\n\n      let item = <Airport\n                    key={airport}\n                    id={airport}\n                    flight_category={flightCategoryCSS}\n                    raw_text={rawText}\n                    updateSelectedAirport={this.props.updateSelectedAirport}\n                    metar={metar}\n                 />\n\n      items.push(item)\n    }\n\n    let rows = [];\n    for(let i = 0; i < this.props.airportRows; i++){\n      let start = i * this.props.airportsPerRow;\n      let end = start + this.props.airportsPerRow\n      rows.push(items.slice(start, end));\n    }\n    return(rows.map((row, i) => { return(<AirportRow key={i}>{row}</AirportRow>) }))\n  }\n}\n\nclass AirportRow extends React.Component {\n  render() {\n    return(\n      <div className=\"tile is-ancestor\">\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass Airport extends React.Component {\n  sendAirportData = () => {\n    this.props.updateSelectedAirport(this.props.metar);\n  }\n\n  render() {\n    return(\n      <div className=\"tile is-parent has-text-centered\" onClick={this.sendAirportData}>\n        <article className={ `tile is-child box notification ${this.props.flight_category}` } style={{padding: '0 5px 5px 0'}}>\n          <p className=\"title is-4 has-text-centered\" style={{marginBottom: '5px'}}> {this.props.id} </p>\n          <AirportWarning metar={this.props.metar}/>\n        </article>\n      </div>\n    );\n  }\n}\n\nclass AirportWarning extends React.Component {\n  render(){\n    let warning = [];\n    let key = Date.now();\n    // We can probably be smarter about displaying warnings\n    // Icing, better represent wind, what else?\n    if(this.props.metar.wind_speed_kt._text > 20){ warning.push(<i key={key} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 20){ warning.push(<i key={key + 1} className=\"fas fa-exclamation-triangle\"></i>) }\n    if(this.props.metar.wind_gust_kt && this.props.metar.wind_gust_kt._text > 30){ warning.push(<i key={key + 2} className=\"fas fa-exclamation-triangle\"></i>) }\n\n    return(\n      <p id={this.props.metar.station_id} className=\"icon is-small has-text-warning\">\n        { warning }\n      </p>\n    )\n  }\n}\n\nclass AirportInfo extends React.Component {\n  render(){\n    let metar_text = null;\n    if(this.props.selectedAirport){\n      metar_text = this.props.selectedAirport.raw_text._text;\n    }else{\n      metar_text = ''\n    }\n\n    return(\n      <pre>\n        {metar_text}\n      </pre>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}